<?php


namespace Zedstar16\HorizonCore\entities;

use pocketmine\entity\Entity;
use pocketmine\entity\object\ItemEntity;
use pocketmine\event\entity\ItemSpawnEvent;
use pocketmine\item\Item;
use pocketmine\level\Level;
use pocketmine\level\particle\DustParticle;
use pocketmine\level\particle\FlameParticle;
use pocketmine\level\particle\LavaDripParticle;
use pocketmine\level\Position;
use pocketmine\math\Vector3;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\AddItemActorPacket;
use pocketmine\Player;
use UnexpectedValueException;

class FloatingItemEntity extends Entity
{
    public $width = 0.25;
    public $height = 0.25;
    public $canCollide = false;
    /** @var string */
    protected $owner = "";
    /** @var string */
    protected $thrower = "";
    /** @var int */
    protected $pickupDelay = 0;
    /** @var Item */
    protected $item;
    protected $baseOffset = 0.125;
    protected $gravity = -0.001;
    protected $drag = 0;
    /** @var int */
    protected $age = 0;

    /**
     * @param Level $level
     * @param CompoundTag $nbt
     * @param Player $owner
     */
    public function __construct(Level $level, CompoundTag $nbt, Player $owner)
    {
        $this->owner = $owner->getName();
        parent::__construct($level, $nbt);
        $this->setCanSaveWithChunk(false);
        $this->setMotion(new Vector3(0, 0, 0));
        $this->setGenericFlag(Entity::DATA_FLAG_NO_AI);
    }

    public function applyGravity(): void
    {

    }

    public function entityBaseTick(int $tickDiff = 1): bool
    {

        $rgb_list = [
            [255, 0, 0],
            [255, 145, 0],
            [255, 221, 0],
        ];
        for ($i = 0; $i <= 3; $i++) {
            $pos = $this->asVector3()->subtract(0.1, 1, 0.1);
            $pos = $pos->add(mt_rand(0, 2) / 10, mt_rand(0, 12) / 10, mt_rand(0, 2) / 10);
            $rgb = $rgb_list[mt_rand(0, count($rgb_list) - 1)];
            $this->getLevel()->addParticle(new DustParticle($pos, $rgb[0], $rgb[1], $rgb[2]));
        }
        return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
    }

    /**
     * @param Player $player
     */
    public function spawnTo(Player $player): void
    {
        if ($player->getName() === $this->owner) {
            parent::spawnTo($player);
        }
    }

    public function saveNBT(): void
    {
        parent::saveNBT();
        $this->namedtag->setTag($this->item->nbtSerialize(-1, "Item"));
        $this->namedtag->setShort("Health", (int)$this->getHealth());
        $this->namedtag->setShort("Age", $this->age);
        $this->namedtag->setShort("PickupDelay", $this->pickupDelay);
        if ($this->owner !== null) {
            $this->namedtag->setString("Owner", $this->owner);
        }
        if ($this->thrower !== null) {
            $this->namedtag->setString("Thrower", $this->thrower);
        }
    }

    public function canCollideWith(Entity $entity): bool
    {
        return false;
    }

    public function canBeCollidedWith(): bool
    {
        return false;
    }

    protected function initEntity(): void
    {
        parent::initEntity();
        $this->setMaxHealth(5);
        $this->setHealth($this->namedtag->getShort("Health", (int)$this->getHealth()));
        $this->age = $this->namedtag->getShort("Age", $this->age);
        $this->pickupDelay = $this->namedtag->getShort("PickupDelay", $this->pickupDelay);
        $this->owner = $this->namedtag->getString("Owner", $this->owner);
        $this->thrower = $this->namedtag->getString("Thrower", $this->thrower);

        $itemTag = $this->namedtag->getCompoundTag("Item");
        if ($itemTag === null) {
            throw new UnexpectedValueException("Invalid " . get_class($this) . " entity: expected \"Item\" NBT tag not found");
        }
        $this->item = Item::nbtDeserialize($itemTag);
        if ($this->item->isNull()) {
            throw new UnexpectedValueException("Item for " . get_class($this) . " is invalid");
        }
    }

    protected function sendSpawnPacket(Player $player): void
    {
        $pk = new AddItemActorPacket();
        $pk->entityRuntimeId = $this->getId();
        $pk->position = $this->asVector3();
        $pk->motion = $this->getMotion();
        $pk->item = $this->getItem();
        $pk->metadata = $this->propertyManager->getAll();

        $player->dataPacket($pk);
    }

    public function getItem(): Item
    {
        return $this->item;
    }

}